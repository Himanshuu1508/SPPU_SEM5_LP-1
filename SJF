import java.util.Scanner;

class Main {
    public static void main(String args[]) {
        int burst_time[], process[], waiting_time[], tat[], arr_time[], completion_time[], i, j, n, total = 0, total_comp = 0, pos, temp;
        float wait_avg, TAT_avg;
        Scanner s = new Scanner(System.in);
        
        // Input the number of processes
        System.out.print("Enter number of process: ");
        n = s.nextInt();
        
        // Initialize arrays for burst time, process number, waiting time, arrival time, turnaround time, and completion time
        process = new int[n];
        burst_time = new int[n];
        waiting_time = new int[n];
        arr_time = new int[n];
        tat = new int[n];
        completion_time = new int[n];
        
        // Input burst times for each process
        System.out.println("\nEnter Burst time:");
        for (i = 0; i < n; i++) {
            System.out.print("\nProcess[" + (i + 1) + "]: ");
            burst_time[i] = s.nextInt();
            process[i] = i + 1; // Assign process numbers
        }
        
        // Input arrival times for each process
        System.out.println("\nEnter arrival time:");
        for (i = 0; i < n; i++) {
            System.out.print("\nProcess[" + (i + 1) + "]: ");
            arr_time[i] = s.nextInt();
        }
        
        // Sorting burst times in ascending order using selection sort
        for (i = 0; i < n; i++) {
            pos = i;
            for (j = i + 1; j < n; j++) {
                if (burst_time[j] < burst_time[pos])
                    pos = j;
            }
            // Swap burst times and process numbers accordingly
            temp = burst_time[i];
            burst_time[i] = burst_time[pos];
            burst_time[pos] = temp;
            
            temp = process[i];
            process[i] = process[pos];
            process[pos] = temp;
        }
        
        // Calculate completion times
        for (i = 0; i < n; i++) {
            completion_time[i] = 0;
            for (j = 0; j < i; j++)
                completion_time[i] += burst_time[j];
            total_comp += completion_time[i];
        }
        
        // First process has 0 waiting time
        waiting_time[0] = 0;
        
        // Calculate waiting times
        for (i = 1; i < n; i++) {
            waiting_time[i] = 0;
            for (j = 0; j < i; j++)
                waiting_time[i] += burst_time[j];
            total += waiting_time[i];
        }
        
        // Calculate Average waiting time
        wait_avg = (float) total / n;

        total = 0;
        System.out.println("\nPro_number\tBurst Time\tcompletion_time\tWaiting Time\tTurnaround Time");
        for (i = 0; i < n; i++) {
            tat[i] = burst_time[i] + waiting_time[i];
            total += tat[i];
            System.out.println("\n" + process[i] + "\t\t" + burst_time[i] + "\t\t" + completion_time[i] + "\t\t" + waiting_time[i] + "\t\t" + tat[i]);
        }
        
        // Calculate Average Turnaround Time
        TAT_avg = (float) total / n;
        System.out.println("\n\nAWT: " + wait_avg);
        System.out.println("ATAT: " + TAT_avg);
    }
}
